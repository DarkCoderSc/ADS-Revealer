unit TDataStreamObject;

interface

uses WinAPI.Windows, System.Classes, System.SysUtils;

type
  TDataStream = class
  private
    FTargetFile : String;

    {@M}
    function Enumerate_FindFirstStream() : Int64;
  public
    {@C}
    constructor Create(ATargetFile : String; AEnumerateNow : Boolean = True);

    {@M}
    function Refresh() : Int64;
  end;

implementation

{
  FindFirstStream / FindNextStream API Definition
}
type
  _STREAM_INFO_LEVELS = (FindStreamInfoStandard, FindStreamInfoMaxInfoLevel);
  TStreamInfoLevels = _STREAM_INFO_LEVELS;

var hKernel32         : THandle;
    _FindFirstStreamW : function(lpFileName : LPCWSTR; InfoLevel : TStreamInfoLevels; lpFindStreamData : LPVOID; dwFlags : DWORD) : THandle; stdcall;
    _FindNextStreamW  : function(hFindStream : THandle; lpFindStreamData : LPVOID) : BOOL; stdcall;

{-------------------------------------------------------------------------------
  Scan for ADS using method N°1 (FindFirstStream / FindNextStream). Work since
  Microsoft Windows Vista.
-------------------------------------------------------------------------------}
function TDataStream.Enumerate_FindFirstStream() : Int64;
var hStream : THandle;
    AData   : TFindStreamData;
begin
  result := 0;
  ///

  if NOT FileExists(FTargetFile) then
    Exit(-1);

  if (NOT Assigned(@_FindFirstStreamW)) or (NOT Assigned(@_FindNextStreamW)) then
    Exit(-2);

  // https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-findfirststreamw
  hStream := _FindFirstStreamW(PWideChar(FTargetFile), FindStreamInfoStandard, @AData, 0);
  if (hStream = INVALID_HANDLE_VALUE) then begin
    case GetLastError() of
      ERROR_HANDLE_EOF : begin
        Exit(-3);
      end;

      ERROR_INVALID_PARAMETER : begin
        Exit(-4);
      end;

      else begin
        Exit(-5);
      end;
    end;
  end;

end;

{-------------------------------------------------------------------------------
  Refresh embedded data stream objects using Windows API. Returns number of
  data stream objects or an error identifier.
-------------------------------------------------------------------------------}
function TDataStream.Refresh() : Int64;
begin
  result := 0;
  ///

  result := self.Enumerate_FindFirstStream();

  //FindFirstStreamW(PChar(srcFile), STREAM_INFO_LEVELS.FindStreamInfoStandard, @FindStreamData, 0);
end;

{-------------------------------------------------------------------------------
  ___constructor
-------------------------------------------------------------------------------}
constructor TDataStream.Create(ATargetFile : String; AEnumerateNow : Boolean = True);
begin
  self.FTargetFile := ATargetFile;

  if AEnumerateNow then
    self.Refresh();
end;

initialization
  _FindFirstStreamW := nil;
  _FindNextStreamW  := nil;

  hKernel32 := LoadLibrary('KERNEL32.DLL');
  if (hKernel32 > 0) then begin
    @_FindFirstStreamW := GetProcAddress(hKernel32, 'FindFirstStreamW');
    @_FindNextStreamW := GetProcAddress(hKernel32, 'FindNextStreamW');
  end;

end.
